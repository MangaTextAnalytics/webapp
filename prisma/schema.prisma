// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  libary        Library?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Manga {
  id        Int     @id @default(autoincrement())
  title     String  @unique
  author    String
  year      Int
  statsId   Int     @unique

  stats       Stats   @relation(fields: [statsId], references: [id], onDelete: Cascade)
  volumes     Volume[]
  libraries   Library[]
  frequencies Frequency[]
}

model Volume {
  id          Int   @id @default(autoincrement())
  volume      Int
  statsId     Int   @unique
  mangaId    Int

  stats       Stats @relation(fields: [statsId], references: [id], onDelete: Cascade)
  manga       Manga @relation(fields: [mangaId], references: [id], onDelete: Cascade)
  frequencies Frequency[]

  // only allow one #1 volume per manga
  @@unique([mangaId, volume])

  // allow for searching by manga
  @@index([mangaId], name: "manga_id_index")
}

model Frequency {
  id         Int       @id @default(autoincrement())
  count      Int
  termTerm   String
  term       Term      @relation(fields: [termTerm], references: [term])
  libraryId Int?
  volumeId  Int?
  mangaId   Int?

  library    Library? @relation(fields: [libraryId], references: [id])
  volume     Volume?  @relation(fields: [volumeId], references: [id])
  manga      Manga?   @relation(fields: [mangaId], references: [id])

  // Allow for searching by library
  @@index([libraryId], name: "library_id_index")

  // Allow for searching by volume
  @@index([volumeId], name: "volume_id_index")

  // Ensure only one frequency per term per library or volume or manga
  @@unique([termTerm, libraryId])
  @@unique([termTerm, volumeId])
  @@unique([termTerm, mangaId])
}

model Term {
  term        String  @id
  totalCount  Int

  Frequency   Frequency[]

  // allow for querying by totalCount
  @@index([totalCount], name: "totalCount_index")
}

model Library {
  id      Int     @id @default(autoincrement())
  userId  String  @unique
  statsId Int     @unique

  user        User    @relation(fields: [userId], references: [id])
  stats       Stats   @relation(fields: [statsId], references: [id], onDelete: Cascade)
  mangas      Manga[]
  frequencies Frequency[]

  // allow for searching by user
  @@index([userId], name: "userId_index")
}

model Stats {
  id                Int   @id @default(autoincrement())
  uniqueWords       Int   @default(0)
  totalWords        Int   @default(0)
  wordsUsedOnce     Int   @default(0)
  wordsUsedOncePct  Float @default(0)

  library Library?
  manga   Manga?
  volume  Volume?
}
